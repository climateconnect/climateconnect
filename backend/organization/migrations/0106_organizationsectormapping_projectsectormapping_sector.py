# Generated by Django 3.2.25 on 2025-04-21 19:40

from django.db import migrations, models
import django.db.models.deletion

DEBUG_PREFIX = "T-SECTOR"


class Sector_Definition:
    def __init__(self, name, de_translated_name, key):
        self.name = name
        self.de_translated_name = de_translated_name
        self.key = key


SECTOR_DEFINITIONS = {
    x.key: x
    for x in [
        Sector_Definition(
<<<<<<< HEAD
            "Food",
            "Ernährung",
            "food",
        ),
        Sector_Definition(
            "Agri & Land use",
            "Landwirtschaft & Landnutzung",
            "agri",
        ),
        Sector_Definition(
            "Buildings",
            "Bauen und Wohnen",
            "buldings",
        ),
        Sector_Definition(
            "Energy",
            "Energiewende",
            "energy",
        ),
        Sector_Definition(
            "Policy & Governance",
            "Politik und Verwaltung",
            "policy",
        ),
        Sector_Definition(
            "Education, Social Action & Health",
            "Bildung, Soziale Aktion & Gesundheit",
=======
            "Food & Agriculture",
            "Ernährung & Landwirtschaft",
            "food",
        ),
        Sector_Definition(
            "Building & Housing",
            "Bauen und Wohnen",
            "housing",
        ),
        Sector_Definition(
            "Energy",
            "Energie",
            "energy",
        ),
        Sector_Definition(
            "Politics & Activism",
            "Politik und Aktivismus",
            "policy",
        ),
        Sector_Definition(
            "Education",
            "Bildung",
>>>>>>> master
            "education",
        ),
        Sector_Definition(
            "Mobility",
            "Mobilität",
            "mobility",
        ),
        Sector_Definition(
<<<<<<< HEAD
            "Industry & Building",
            "Industrie & Bauwesen",
            "industry",
        ),
        Sector_Definition(
            "Costal and Ocean sinks",
            "Küsten- und Ozeanspeicher",
            "costal",
        ),
        Sector_Definition(
            "Engineered sinks",
            "Technisch erzeugte Speicher",
            "engineered",
        ),
        Sector_Definition(
            "Research",
            "Wissenschaft",
            "research",
        ),
        Sector_Definition(
            "Climate change adaption",
            "Anpassung an den Klimawandel",
            "adaption",
        ),
        Sector_Definition(
            "Climate justice",
            "Klimagerechtigkeit",
            "justice",
        ),
=======
            "Nature & Biodiversity",
            "Natur und Biodiversität",
            "nature",
        ),
        Sector_Definition(
            "Resources & Consumption",
            "Konsum & Resourcen",
            "resources",
        ),
        Sector_Definition(
            "Climate Adaption",
            "Klimaanpassung",
            "adaption",
        ),
>>>>>>> master
    ]
}

DELETION_TOKEN = "DELETION_TOKEN"

MAPPING = {
<<<<<<< HEAD
    "Air": SECTOR_DEFINITIONS["industry"],
    "Construction": SECTOR_DEFINITIONS["industry"],
    "Buildings": SECTOR_DEFINITIONS["buldings"],
    "Climate change adaption": SECTOR_DEFINITIONS["adaption"],
    "Climate justice": SECTOR_DEFINITIONS["justice"],
=======
    "Air": DELETION_TOKEN,
    "Buildings": SECTOR_DEFINITIONS["housing"],
    "Education on climate change adaption": SECTOR_DEFINITIONS["education"],
    "Climate change adaption": SECTOR_DEFINITIONS["adaption"],
    "Climate justice": SECTOR_DEFINITIONS["policy"],
    "Demonstrations & strikes": SECTOR_DEFINITIONS["policy"],
    "Petition": SECTOR_DEFINITIONS["policy"],
>>>>>>> master
    "Education & Social action": SECTOR_DEFINITIONS["education"],
    "Energy": SECTOR_DEFINITIONS["energy"],
    "Food": SECTOR_DEFINITIONS["food"],
    "Funding": DELETION_TOKEN,
<<<<<<< HEAD
    "Geoengineering": SECTOR_DEFINITIONS["engineered"],
    "Land use": SECTOR_DEFINITIONS["agri"],
    "Policy & Governance": SECTOR_DEFINITIONS["policy"],
    "Product": DELETION_TOKEN,
    "Production, consumption and recycling": SECTOR_DEFINITIONS["industry"],
    "Research": SECTOR_DEFINITIONS["research"],
    "Mobility": SECTOR_DEFINITIONS["mobility"],
    "Water": DELETION_TOKEN,  # TODO
    "Reducing marine pollution": SECTOR_DEFINITIONS["costal"],
    "Fighting ocean acidification": SECTOR_DEFINITIONS["costal"],
    "Fighting overfishing": SECTOR_DEFINITIONS["costal"],
    "Protecting marine ecosystems": SECTOR_DEFINITIONS["costal"],
    "Improving water use efficiency": SECTOR_DEFINITIONS["industry"],
    "Water recycling": SECTOR_DEFINITIONS["industry"],
=======
    "Geoengineering": SECTOR_DEFINITIONS["adaption"],
    "Climate-friendly agriculture": SECTOR_DEFINITIONS["food"],
    "Land use": SECTOR_DEFINITIONS["nature"],
    "Policy & Governance": SECTOR_DEFINITIONS["policy"],
    "Product": DELETION_TOKEN,
    "Production, consumption and recycling": SECTOR_DEFINITIONS["resources"],
    "Research": DELETION_TOKEN,
    "Mobility": SECTOR_DEFINITIONS["mobility"],
    "Water": SECTOR_DEFINITIONS["resources"],  # TODO
    "Fighting ocean acidification": SECTOR_DEFINITIONS["nature"],
    "Protecting marine ecosystems": SECTOR_DEFINITIONS["nature"],
>>>>>>> master
    "Event": DELETION_TOKEN,
}


def create_sectors(apps, schema_editor):
    Sector = apps.get_model("organization", "Sector")

    for sector in SECTOR_DEFINITIONS.values():
        Sector.objects.get_or_create(
            name=sector.name,
            key=sector.key,
            name_de_translation=sector.de_translated_name,
        )


def generate_sector_mappings_from_project_taggings(apps, schema_editor):
    ProjectTagging = apps.get_model("organization", "ProjectTagging")
    ProjectSectorMapping = apps.get_model("organization", "ProjectSectorMapping")
    Sector = apps.get_model("organization", "Sector")

    added_mappings = []
    deleted_mappings = []
    missing_mappings = []

    for tagging in ProjectTagging.objects.all():
        project = tagging.project
        if not project or not project.name.startswith(DEBUG_PREFIX):
            continue

        tag = tagging.project_tag
        name = tag.name.replace(DEBUG_PREFIX + "-", "")

        sector_def = MAPPING.get(name, None)

        # propagate sector mapping to the parent tag
        # if specification for current tag is not found
        parent_name = None
        if sector_def is None and tag.parent_tag is not None:
            parent_tag = tag.parent_tag
            parent_name = parent_tag.name.replace(DEBUG_PREFIX + "-", "")

            sector_def = MAPPING.get(parent_name, None)

        if sector_def is DELETION_TOKEN:
            print(
                f"[MIGRATION] [-]\tDELETION TOKEN found: '{tag.name}', will skip the mapping "
                + f"for [project]'{project.name}'--'{tag.name}[tag]'"
            )
            deleted_mappings.append(
                {
                    "project": project,
                    "tag": tag,
                    "parent_name": parent_name,
                }
            )
            continue

        if sector_def is None:
            print(
                f"[MIGRATION] [!]\tNo mapping found for tag '{tag.name}' ({name}), will skip the mapping "
                + f"for [project]'{project.name}'--'{tag.name}[tag]'"
            )
            missing_mappings.append(
                {
                    "project": project,
                    "tag": tag,
                    "parent_name": parent_name,
                }
            )

            continue

        sector = Sector.objects.get(key=sector_def.key)
        ProjectSectorMapping.objects.get_or_create(
            project=project,
            sector=sector,
        )
        print(
            f"[MIGRATION] [+]\tCreated mapping for [project]'{project.name}' -- '{tag.name}'[tag] ==> '{sector_def.key}'[sector] "
        )
        added_mappings.append(
            {"project": project, "tag": tag, "sector_def": sector_def, "sector": sector}
        )

    print("" + "-" * 80)
    print("[MIGRATION] >> Deletions:")
    for ele in deleted_mappings:
        print(
            "\t\t\t\t",
            ele["project"].name,
            ele["tag"].name,
            ele["parent_name"],
        )

    print("[MIGRATION] >> Missing Mappings:")
    for ele in missing_mappings:
        print(
            "\t\t\t\t",
            ele["project"].name,
            ele["tag"].name,
            ele["parent_name"],
        )

    print(f"[MIGRATION] >> {len(added_mappings)}\tadded mappings")
    print(f"[MIGRATION] >> {len(deleted_mappings)}\tdeleted mappings")
    print(f"[MIGRATION] >> {len(missing_mappings)}\tmissing mappings")
    print()
    # Organization = apps.get_model("organization", "Organization")
    # OrganizationSectorMapping = apps.get_model(
    #     "organization", "OrganizationSectorMapping"
    # )
    # for organization in Organization.objects.all():
    #     for tag in organization.tags.all():
    #         if tag.name in MAPPING:
    #             sector = MAPPING[tag.name]
    #             if sector is not None:
    #                 OrganizationSectorMapping.objects.get_or_create(
    #                     organization=organization,
    #                     sector=sector,
    #                 )


####################################################
# auto generateed migration
class Migration(migrations.Migration):

    dependencies = [
        ("organization", "0105_organization_related_hubs_alter_organization_hubs"),
    ]

    operations = [
        migrations.CreateModel(
            name="Sector",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the sector",
                        max_length=256,
                        verbose_name="Name",
                    ),
                ),
                (
                    "name_de_translation",
                    models.CharField(
                        blank=True,
                        help_text="German traslation of the name column",
                        max_length=256,
                        null=True,
                        verbose_name="Name DE translation",
                    ),
                ),
                (
                    "key",
                    models.CharField(
                        help_text="unique search key of the sector. Example: `Student organization` becomes studentorganization",
                        max_length=256,
                        unique=True,
                        verbose_name="Key",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Time when sector was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Time when sector was updated",
                        verbose_name="Updated at",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sector",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="ProjectSectorMapping",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Time when mapping was created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Time when mapping was updated",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="The bigger the number, the more to the top this sector will be displayed",
                        verbose_name="Position of tag",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="organization.project",
                    ),
                ),
                (
                    "sector",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="organization.sector",
                    ),
                ),
            ],
            options={
                "verbose_name": "Project Sector Mapping",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="OrganizationSectorMapping",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Time when mapping was created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Time when mapping was updated",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="The bigger the number, the more to the top this sector will be displayed",
                        verbose_name="Position of tag",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="organization.organization",
                    ),
                ),
                (
                    "sector",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="organization.sector",
                    ),
                ),
            ],
            options={
                "verbose_name": "Organization Sector Mapping",
                "ordering": ["id"],
            },
        ),
        ####################################################
        # manual addition
        migrations.RunPython(
            create_sectors,
            reverse_code=migrations.RunPython.noop,
        ),
        # Link sectors to existing sector hubs (use key and url_slug)
        # migration for organizations: link to hub changes to link to hub.sector
        migrations.RunPython(
            generate_sector_mappings_from_project_taggings,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
