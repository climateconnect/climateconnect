# Generated by Django 3.2.25 on 2025-05-12 08:09

# from hubs.models.hub import Hub

from django.db import migrations, models
from django.core.files.base import ContentFile
import organization.models.sector


# Issue: '0107_organization_sectors' starts with a digit. Therefore, the direct import does not work.
# from 0107_organization_sectors

# Workaround: dynamically import the module
MAPPING_SECTOR_HUB_TO_SECTOR = __import__(
    "organization.migrations.0107_organization_sectors",
    fromlist=["MAPPING_SECTOR_HUB_TO_SECTOR"],
).MAPPING_SECTOR_HUB_TO_SECTOR


def load_sector_images_from_sector_hubs(apps, schema_editor):
    Hub = apps.get_model("hubs", "Hub")

    results = {
        "sucesses": {"count": 0, "objects": []},
        "ommits": {"count": 0, "objects": []},
        "fails": {"count": 0, "objects": []},
    }

    def fail(hub):
        results["fails"]["count"] += 1
        results["fails"]["objects"].append(hub)

    def ommits(hub):
        results["ommits"]["count"] += 1
        results["ommits"]["objects"].append(hub)

    def success(hub):
        results["sucesses"]["count"] += 1
        results["sucesses"]["objects"].append(hub)

    for hub in Hub.objects.all():
        print()
        if not hub.hub_type == 0:
            continue

        if hub.url_slug not in MAPPING_SECTOR_HUB_TO_SECTOR:
            print(
                f"Sector Hub {hub.name} has no explicit mapping to a sector (or None)"
            )
            fail(hub)
            continue

        if MAPPING_SECTOR_HUB_TO_SECTOR[hub.url_slug] is None:
            print(
                f"Sector Hub {hub.name} will be deleted and is not linked to a sector"
            )
            ommits(hub)
            continue

        sectors = hub.sectors.all()
        if len(sectors) != 1:
            print(
                f"Sector Hub {hub.name} is not linked to exactly one sector: {', '.join([s.key for s in sectors])}"
            )
            fail(hub)
            continue

        sector = sectors[0]

        # IMAGE & ATTRIBUTION
        print(
            f"--> Porting images and icons from hub {hub.name} to sector {sector.key}"
        )
        if hub.image is not None:
            img = hub.image.open()
            content = ContentFile(img.read())
            file_ending = "." + hub.image.name.split(".")[-1]

            sector.image.save(sector.key + file_ending, content)

            content.close()
            sector.save()
            print(f"[+] Added image             for {sector.key} from hub {hub.name}")

        if hub.image_attribution is not None:
            sector.image_attribution = hub.image_attribution
            sector.save()
            print(f"[+] Added image attribution for {sector.key} from hub {hub.name}")

        # ICON
        if hub.icon is not None:
            img = hub.icon.open()
            content = ContentFile(img.read())
            file_ending = "." + hub.icon.name.split(".")[-1]

            sector.icon.save(sector.key + file_ending, content)

            content.close()
            sector.save()
            print(f"[+] Added icon             for {sector.key} from hub {hub.name}")

        # THUMBNAIL IMAGE
        if hub.sectors is not None:
            img = hub.thumbnail_image.open()
            content = ContentFile(img.read())
            file_ending = "." + hub.thumbnail_image.name.split(".")[-1]

            sector.thumbnail_image.save(sector.key + file_ending, content)

            content.close()
            sector.save()
            print(f"[+] Added thumbnail_image  for {sector.key} from hub {hub.name}")
        hub.url_slug
        success(hub)

    ##################
    # report summary
    print()
    print("-" * 50)
    print(">> Migration Results:")
    successes = results["sucesses"]
    ommitted = results["ommits"]
    fails = results["fails"]

    print(f"├── Successes ({successes['count']}):")
    for hub in successes["objects"]:
        print(f"│   ├── Hub (url_slug: {hub.url_slug}, Type: {hub.hub_type})")

    print(f"├── Ommitted ({ommitted['count']}):")
    for hub in ommitted["objects"]:
        print(f"│   ├── Hub (url_slug: {hub.url_slug}, Type: {hub.hub_type})")

    print(f"└── Fails ({fails['count']}):")
    for hub in fails["objects"]:
        print(f"   ├── Hub (url_slug: {hub.url_slug}, Type: {hub.hub_type})")

    pass


####################################################
# auto generateed migration
class Migration(migrations.Migration):

    dependencies = [
        ("organization", "0107_organization_sectors"),
    ]

    operations = [
        migrations.AddField(
            model_name="sector",
            name="icon",
            field=models.FileField(
                blank=True,
                help_text="The icon representing the hub in the small sector preview cards",
                null=True,
                upload_to=organization.models.sector.sector_image_path,
                verbose_name="Icon",
            ),
        ),
        migrations.AddField(
            model_name="sector",
            name="image",
            field=models.ImageField(
                blank=True,
                help_text="Sector image",
                null=True,
                upload_to=organization.models.sector.sector_image_path,
                verbose_name="Image",
            ),
        ),
        migrations.AddField(
            model_name="sector",
            name="image_attribution",
            field=models.CharField(
                blank=True,
                help_text="This is incase we have to attribute somebody or a website for using their image",
                max_length=1024,
                null=True,
                verbose_name="Image attribution",
            ),
        ),
        migrations.AddField(
            model_name="sector",
            name="thumbnail_image",
            field=models.ImageField(
                blank=True,
                help_text="Image to show on sector card",
                null=True,
                upload_to=organization.models.sector.sector_image_path,
                verbose_name="Thumbnail image",
            ),
        ),
        ####################################################
        # manual addition
        migrations.RunPython(
            load_sector_images_from_sector_hubs,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
