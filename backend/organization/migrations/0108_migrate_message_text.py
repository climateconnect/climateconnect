# Generated by Django 3.2.23 on 2025-05-07 09:03

from django.db import migrations
from django.utils.timezone import now

def copy_messages(apps, schema_editor):
    MembershipRequests = apps.get_model('organization', 'MembershipRequests')
    Message = apps.get_model('chat_messages', 'Message')
    MessageParticipants = apps.get_model('chat_messages', 'MessageParticipants')

    for request in MembershipRequests.objects.all():
        if not request.message_old:
            continue

        # Assuming each MembershipRequest has a `user` and `idea`
        user = getattr(request, "user", None)
        idea = getattr(request, "idea", None)

        if not user:
            continue  # Can't create a message without a participant

        # Try to find existing chat for the same user and idea
        chat = MessageParticipants.objects.filter(
            created_by=user,
            related_idea=idea,
        ).first()

        # Or create a new chat if it doesn't exist
        if not chat:
            chat = MessageParticipants.objects.create(
                name="Auto-created from MembershipRequest",
                created_by=user,
                related_idea=idea,
                is_active=True,
            )

        # Create the new message
        msg = Message.objects.create(
            content=request.message_old,
            message_participant=chat,
            sender=user,
            sent_at=getattr(request, "created_at", None) or now(),
        )

        # Assign the message back to the request
        request.message = msg
        MembershipRequests.objects.filter(pk=request.pk).update(message=msg)

def reverse_transfer(apps, schema_editor):
    # If you need to reverse the migration
    MembershipRequests = apps.get_model('organization', 'MembershipRequests')
    
    for request in MembershipRequests.objects.filter(message__isnull=False):
        if request.message:
            request.message_old = request.message.content
            request.message = None
            if request.message:
                request.message.delete()
            request.save()


class Migration(migrations.Migration):

    dependencies = [
        ('organization', '0107_membershiprequests_message'),
    ]

    operations = [
        migrations.RunPython(copy_messages,reverse_transfer),
    ]
